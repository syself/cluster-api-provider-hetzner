// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	sshclient "github.com/syself/cluster-api-provider-hetzner/pkg/services/baremetal/client/ssh"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

type Factory_Expecter struct {
	mock *mock.Mock
}

func (_m *Factory) EXPECT() *Factory_Expecter {
	return &Factory_Expecter{mock: &_m.Mock}
}

// NewClient provides a mock function with given fields: _a0
func (_m *Factory) NewClient(_a0 sshclient.Input) sshclient.Client {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewClient")
	}

	var r0 sshclient.Client
	if rf, ok := ret.Get(0).(func(sshclient.Input) sshclient.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sshclient.Client)
		}
	}

	return r0
}

// Factory_NewClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewClient'
type Factory_NewClient_Call struct {
	*mock.Call
}

// NewClient is a helper method to define mock.On call
//   - _a0 sshclient.Input
func (_e *Factory_Expecter) NewClient(_a0 interface{}) *Factory_NewClient_Call {
	return &Factory_NewClient_Call{Call: _e.mock.On("NewClient", _a0)}
}

func (_c *Factory_NewClient_Call) Run(run func(_a0 sshclient.Input)) *Factory_NewClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sshclient.Input))
	})
	return _c
}

func (_c *Factory_NewClient_Call) Return(_a0 sshclient.Client) *Factory_NewClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Factory_NewClient_Call) RunAndReturn(run func(sshclient.Input) sshclient.Client) *Factory_NewClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
